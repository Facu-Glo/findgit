#!/usr/bin/env bash
CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/findgit/config.json"
if ! search_paths=($(jq -r '.search_paths[]' "$CONFIG" 2>/dev/null)); then
    echo "Error: No se pudieron leer las rutas de búsqueda del archivo de configuración" >&2
    exit 1
fi
if ! ignore_paths=($(jq -r '.ignore_paths[]' "$CONFIG" 2>/dev/null | sed 's/^/-E /')); then
    ignore_paths=()
fi
if [[ ${#search_paths[@]} -eq 0 ]]; then
    echo "Error: No hay rutas de búsqueda configuradas" >&2
    exit 1
fi

_findgit() {
    local dir
    
    dir=$(
        fd -t d -H --max-depth 6 '^\.git$' "${search_paths[@]}" "${ignore_paths[@]}" --exec dirname {} \; 2>/dev/null | \
        sort -u | \
        xargs -I {} -P $(nproc) bash -c '
            d="$1"
            toplevel=$(git -C "$d" rev-parse --show-toplevel 2>/dev/null) || exit
            [[ "$toplevel" != "$d" ]] && exit
            
            # Verificar si tiene commits
            if ! git -C "$d" rev-parse --verify HEAD >/dev/null 2>&1; then
                # Repo sin commits - usar timestamp 0
                git_timestamp="0"
                if [[ -n $(git -C "$d" ls-files --others --exclude-standard 2>/dev/null) ]]; then
                    echo -e "1\t$git_timestamp\t$d\t\033[31m$d\033[0m"
                else
                    echo -e "2\t$git_timestamp\t$d\t\033[37m$d\033[0m"
                fi
            else
                # Obtener timestamp del último commit
                git_timestamp=$(git -C "$d" --no-pager log -1 --format="%ct" 2>/dev/null || echo "0")
                
                # Repo con commits - verificación completa
                if git -C "$d" diff-index --quiet HEAD -- 2>/dev/null && \
                   git -C "$d" diff-files --quiet 2>/dev/null && \
                   [[ -z $(git -C "$d" ls-files --others --exclude-standard 2>/dev/null) ]]; then
                    echo -e "2\t$git_timestamp\t$d\t\033[37m$d\033[0m"
                else
                    echo -e "1\t$git_timestamp\t$d\t\033[31m$d\033[0m"
                fi
            fi
        ' _ {} | \
        # Ordenar por timestamp y estado
        sort -k1,1n -k2,2nr | \
        # Formatear salida para fzf
        cut -f3,4 | \
        fzf --ansi --with-nth=2 --preview "
            echo -e '\033[32m󰊢 Git Status:\033[0m'
            status_output=\$(git -C {1} -c color.status=always status --short 2>/dev/null)
            if [[ -n \"\$status_output\" ]]; then
                echo \"\$status_output\"
            else
                echo 'No hay modificaciones'
            fi
            echo -e '\n📁 Contenido:'
            if command -v eza &> /dev/null; then
                eza --color=always -al --icons {1} 2>/dev/null || ls -la {1}
            else
                ls -la {1}
            fi
        " | cut -f1
    )
    [[ -n $dir ]] && echo "$dir"
}

_findgit
